buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.1'
    }
}

plugins {
    id "com.zyxist.chainsaw" version "0.3.1"
    id 'net.researchgate.release' version '2.6.0'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'io.codearte.nexus-staging' version '0.9.0'
}

ext {
    /* Dependencies */
    camelVersion = '2.21.0'
    commonsIoVersion = '2.6'
    commonsRdfVersion = '0.5.0'
    commonsRdfJenaVersion = '1.0.0-SNAPSHOT'
    elasticsearchVersion = '6.2.2'
    imageMetadataVersion = '0.2.0-SNAPSHOT'
    iiifVocabularyVersion = '0.1.1'
    jacksonVersion = '2.9.5'
    jsonldVersion = '0.12.0'
    leptonicaVersion = '1.75.3-1.4.1'
    slf4jVersion = '1.7.25'
    tesseractVersion = '3.05.01-1.4.1'
    trellisClientVersion = '0.2.0-SNAPSHOT'
    xbeamVersion = '1.4.16'

    /* Testing */
    jaxbVersion = '2.3.0'
    activationApiVersion = '1.2.0'
    junitVersion = '5.1.1'
    jaxbVersion = '2.3.0'
    jenaVersion = '4.0.0-SNAPSHOT'
    activationVersion = '1.1.1'
    logbackVersion = '1.2.3'
    apiguardianVersion = '1.0.0'

    /* Transitive patched modules */
    commonsLoggingVersion = '1.2'
    jaxbCoreVersion = '2.2.11'
    httpClientOsgiVersion = '4.5.3'
    httpCoreOsgiVersion = '4.4.6'

    jacocoVersion = '0.8.1'
    checkstyleVersion = '8.8'
}

allprojects { subproject ->

    ext {
        name = 'Manifest Metadata Processor API'
        description = 'A Camel LDP implementation'
        vendor = 'pandorasystems'
        homepage = 'http://www.trellisldp.org'
        url = 'http://www.trellisldp.org/apidocs'
        license = 'Apache 2'
        inceptionYear = '2018'
    }

    group = 'de.ubleipzig'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 1.10
    targetCompatibility = 1.10

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xlint:unchecked")
            options.compilerArgs.add("-Xlint:deprecation")
            options.compilerArgs.addAll(["--add-modules", "java.xml.bind", "--add-modules", "jdk.incubator.httpclient"])
        }
    }


    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    }

    junitPlatformTest.jvmArgs("--add-modules", "jdk.incubator.httpclient")

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    license {
        include "**/*.java"
        //noinspection GroovyAssignabilityCheck
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        //noinspection GroovyAssignabilityCheck
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }
}

configure(rootProject) {
    license {
        include "**/*.java"
        //noinspection GroovyAssignabilityCheck
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        //noinspection GroovyAssignabilityCheck
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}